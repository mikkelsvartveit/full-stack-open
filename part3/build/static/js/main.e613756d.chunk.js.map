{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","concat","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"4KAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,wBCPpCK,EAAU,aAuBD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEb,OAAOK,EAAQM,MAAK,SAACC,GAAD,4BAAkBA,EAASC,MAA3B,CAAiCL,QAaxC,EAVA,SAACM,GAEd,OADgBR,IAAMS,KAAKX,EAASU,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACJ,EAAIK,GAElB,OADgBR,IAAMU,IAAN,UAAaZ,EAAb,YAAwBK,GAAMK,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SChBvCI,G,MAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAKjB,UAAU,QAAf,SAAwBiB,MAuFlBC,EA1EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,aAIwBL,mBAAS,OAJjC,mBAITM,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAACmB,GACzBR,EAASQ,QAEV,IAEH,IAuCMC,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAACnC,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACA,cAAC,EAAD,CAAckB,QAASQ,IACvB,6BACGK,EAAYE,KAAI,SAACpC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAlDD,SAACW,GAC1B,IAAMZ,EAAOwB,EAAMa,MAAK,SAACC,GAAD,OAAOA,EAAE1B,KAAOA,KAClC2B,EAAW,2BAAQvC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD6B,EACUpB,EAAI2B,GACXzB,MAAK,SAAC0B,GACLf,EAASD,EAAMY,KAAI,SAACpC,GAAD,OAAWA,EAAKY,KAAOA,EAAKZ,EAAOwC,SAEvDC,OAAM,SAACC,GAENZ,EAAgB,SAAD,OACJ9B,EAAKK,QADD,sCAGfsC,YAAW,WACTb,EAAgB,QACf,KACHL,EAASD,EAAMW,QAAO,SAACG,GAAD,OAAOA,EAAE1B,KAAOA,SAiCVgC,CAAmB5C,EAAKY,MAF3CZ,EAAKY,SAMhB,uBAAMiC,SAjCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB3C,QAASqB,EACTb,MAAM,IAAIoC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,IAG7BpB,EAAmBgB,GAAYlC,MAAK,SAAC0B,GACnCf,EAASD,EAAM6B,OAAOb,IACtBb,EAAW,QAuBX,UACE,uBAAO2B,KAAK,OAAOC,MAAO7B,EAAS8B,SApBhB,SAACV,GACxBnB,EAAWmB,EAAMW,OAAOF,UAoBpB,wBAAQD,KAAK,SAAb,yBCvFRI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e613756d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => [...response.data, nonExisting]);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport \"./index.css\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return <div style={footerStyle}></div>;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        // alert(`the note '${note.content}' was already deleted from server`);\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input type=\"text\" value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}