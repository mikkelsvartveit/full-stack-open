[{"/Users/mikkelsvartveit/dev/full-stack-open/part2/src/index.js":"1","/Users/mikkelsvartveit/dev/full-stack-open/part2/src/components/Note.js":"2","/Users/mikkelsvartveit/dev/full-stack-open/part2/src/App.js":"3","/Users/mikkelsvartveit/dev/full-stack-open/part2/src/services/notes.js":"4"},{"size":141,"mtime":1610292087437,"results":"5","hashOfConfig":"6"},{"size":306,"mtime":1614424757395,"results":"7","hashOfConfig":"6"},{"size":2486,"mtime":1614426114401,"results":"8","hashOfConfig":"6"},{"size":685,"mtime":1617354147164,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"6chlzs",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/mikkelsvartveit/dev/full-stack-open/part2/src/index.js",[],["21","22"],"/Users/mikkelsvartveit/dev/full-stack-open/part2/src/components/Note.js",[],"/Users/mikkelsvartveit/dev/full-stack-open/part2/src/App.js",["23","24"],"import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport \"./index.css\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return <div style={footerStyle}></div>;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        // alert(`the note '${note.content}' was already deleted from server`);\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input type=\"text\" value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/mikkelsvartveit/dev/full-stack-open/part2/src/services/notes.js",["25"],"import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => [...response.data, nonExisting]);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":14,"column":7,"nodeType":"32","messageId":"33","endLine":14,"endColumn":13},{"ruleId":"30","severity":1,"message":"34","line":27,"column":19,"nodeType":"32","messageId":"33","endLine":27,"endColumn":29},{"ruleId":"35","severity":1,"message":"36","line":25,"column":1,"nodeType":"37","endLine":29,"endColumn":3},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'Footer' is assigned a value but never used.","Identifier","unusedVar","'setShowAll' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]